#!/usr/bin/env python
# -*- coding: utf-8 -*-
import time
import openravepy
from planner import priorityPlanner as prp
from planner import SIPP as multiPlanner
import random
import numpy as np
# TODO: The goal and start state of the agent on lines 60, 61 is coming same. Fix it
# TODO: Currently the configurations are not colliding in the SIPP as all config can be different even if
# the orientation is different by 0.00001. SO add the distance measure so that the path for one robot at time
# t should not include any node at that time t for other robots in an circular region of distance d.
if not __openravepy_build_doc__:
    from openravepy import *
    from numpy import *

def removeAllRobots(env):
    for robot in env.GetRobots():
        env.RemoveKinBody(robot)

def addIndividualRobot(env, planFor, startConfigurations):
    env.AddRobot(planFor)
    planFor.SetActiveDOFValues(startConfigurations[planFor])

def removeIndividualRobot(env, planFor):
    env.RemoveKinBody(planFor)

def addAllRobots(env, startConfigurations):
    for robot in startConfigurations.keys():
        env.AddRobot(robot)
        robot.SetActiveDOFValues(startConfigurations[robot])

def waitrobot(robot):
    """busy wait for robot completion"""
    while not robot.GetController().IsDone():
        time.sleep(0.01)

def ConvertPathToTrajectory(robot,path=[]):
#Path should be of the form path = [q_1, q_2, q_3,...], where q_i = [x_i, y_i, theta_i]
    if not path:
	    return None
    # Initialize trajectory
    traj = RaveCreateTrajectory(env,'')
    traj.Init(robot.GetActiveConfigurationSpecification())
    for i in range(0,len(path)):
	    traj.Insert(i,numpy.array(path[i]))
    # Move Robot Through Trajectory
    planningutils.RetimeAffineTrajectory(traj,maxvelocities=ones(3),maxaccelerations=5*ones(3))
    return traj

def tuckarms(env,robot):
    with env:
        jointnames = ['l_shoulder_lift_joint','l_elbow_flex_joint','l_wrist_flex_joint','r_shoulder_lift_joint','r_elbow_flex_joint','r_wrist_flex_joint']
        robot.SetActiveDOFs([robot.GetJoint(name).GetDOFIndex() for name in jointnames])
        robot.SetActiveDOFValues([1.29023451,-2.32099996,-0.69800004,1.27843491,-2.32100002,-0.69799996]);
        robot.GetController().SetDesired(robot.GetDOFValues());
    waitrobot(robot)

if __name__ == "__main__":

    env = Environment()
    env.SetViewer('qtcoin')
    collisionChecker = RaveCreateCollisionChecker(env,'ode')
    env.SetCollisionChecker(collisionChecker)


    env.Reset()
    # load a scene from ProjectRoom environment XML file
    env.Load('./data/pr2test3.env.xml')
    # env.Load('./data/4PR2_door.xml')
    time.sleep(0.1)

    startConfigurations = dict()
    # 1) get the 1st robot that is inside the loaded scene
    # 2) assign it to the variable named 'robot'
    for i in range(len(env.GetRobots())):
         robot = env.GetRobots()[i]
         tuckarms(env, robot)

         # tuck in the PR2's arms for driving

    with env:
        for i in range(len(env.GetRobots())):
            robot = env.GetRobots()[i]
            robot.SetActiveDOFs([], DOFAffine.X | DOFAffine.Y | DOFAffine.RotationAxis, [0, 0, 1])
            startConfigurations[robot] = list(robot.GetActiveDOFValues())
        # Robot[0] is the ambulance and all others are vehicles
        robotList = env.GetRobots()
        TI = dict()
        # ambulanceGoalConfig = [2.6,-1.3,-pi/2]
        handler = []
        random.seed(2)

        path = [[-3.3999999999999999, -1.3999999999999999, -0.0],
         [-3.1499999999999999, -1.2599999999999998, 0.0],
         [-2.8999999999999999, -1.1199999999999997, 0.0],
         [-2.6499999999999999, -0.97999999999999965, 0.0],
         [-2.3999999999999999, -0.97999999999999965, 0.0],
         [-2.1499999999999999, -0.97999999999999965, 0.0],
         [-1.8999999999999999, -0.97999999999999965, 0.0],
         [-1.6499999999999999, -0.97999999999999965, 0.0],
         [-1.3999999999999999, -0.97999999999999965, 0.0],
         [-1.1499999999999999, -0.97999999999999965, 0.0],
         [-0.89999999999999991, -0.97999999999999965, 0.0],
         [-0.64999999999999991, -0.97999999999999965, 0.0],
         [-0.39999999999999991, -0.97999999999999965, 0.0],
         [-0.14999999999999991, -0.83999999999999964, 0.0],
         [-0.14999999999999991, -0.69999999999999962, 0.0],
         [-0.14999999999999991, -0.55999999999999961, 0.0],
         [-0.14999999999999991, -0.4199999999999996, 0.0],
         [-0.14999999999999991, -0.27999999999999958, 0.0],
         [-0.14999999999999991, -0.13999999999999957, 0.0],
         [-0.14999999999999991, 4.4408920985006262e-16, 0.0],
         [-0.14999999999999991, 0.14000000000000046, 0.0],
         [-0.14999999999999991, 0.28000000000000047, 0.0],
         [-0.14999999999999991, 0.42000000000000048, 0.0],
         [-0.14999999999999991, 0.5600000000000005, 0.0],
         [-0.14999999999999991, 0.70000000000000051, 0.0],
         [-0.14999999999999991, 0.84000000000000052, 0.0],
         [-0.14999999999999991, 0.98000000000000054, 0.0],
         [0.10000000000000009, 1.1200000000000006, -0.25],
         [0.35000000000000009, 1.1200000000000006, -0.25],
         [0.60000000000000009, 1.1200000000000006, 0.0],
         [0.85000000000000009, 1.1200000000000006, 0.0],
         [1.1000000000000001, 1.1200000000000006, 0.0],
         [1.3500000000000001, 1.1200000000000006, 0.0],
         [1.6000000000000001, 1.2600000000000007, 0.0],
         [1.8500000000000001, 1.2600000000000007, 0.0],
         [2.1000000000000001, 1.2600000000000007, 0.0],
         [2.3500000000000001, 1.2600000000000007, 0.0],
         [2.8, 1.4, 0.05]]

        path1 = [[-2.7999999999999998, 1.3999999999999999, -0.0],
         [-2.7999999999999998, 1.3999999999999999, -0.25],
         [-3.0499999999999998, 1.2599999999999998, -0.5],
         [-3.2999999999999998, 1.2599999999999998, -0.75],
         [-3.2999999999999998, 1.2599999999999998, -1.0],
         [-3.2999999999999998, 1.1199999999999997, -1.25],
         [-3.2999999999999998, 0.97999999999999965, -1.25],
         [-3.2999999999999998, 0.83999999999999964, -1.25],
         [-3.2999999999999998, 0.69999999999999962, -1.25],
         [-3.2999999999999998, 0.55999999999999961, -1.25],
         [-3.2999999999999998, 0.4199999999999996, -1.25],
         [-3.2999999999999998, 0.27999999999999958, -1.25],
         [-3.2999999999999998, 0.13999999999999957, -1.25],
         [-3.2999999999999998, -4.4408920985006262e-16, -1.25],
         [-3.2999999999999998, -0.14000000000000046, -1.25],
         [-3.2999999999999998, -0.28000000000000047, -1.25],
         [-3.2999999999999998, -0.42000000000000048, -1.25],
         [-3.2999999999999998, -0.5600000000000005, -1.25],
         [-3.2999999999999998, -0.70000000000000051, -1.25],
         [-3.2999999999999998, -0.84000000000000052, -1.25],
         [-3.0499999999999998, -0.98000000000000054, -1.5],
         [-2.7999999999999998, -0.98000000000000054, -1.5],
         [-2.5499999999999998, -0.98000000000000054, -1.5],
         [-2.2999999999999998, -0.98000000000000054, -1.5],
         [-2.0499999999999998, -0.98000000000000054, -1.5],
         [-1.7999999999999998, -0.98000000000000054, -1.5],
         [-1.5499999999999998, -0.98000000000000054, -1.5],
         [-1.2999999999999998, -0.98000000000000054, -1.5],
         [-1.0499999999999998, -1.1200000000000006, -1.5],
         [-0.79999999999999982, -1.1200000000000006, -1.5],
         [-0.54999999999999982, -1.2600000000000007, -1.5],
         [-0.29999999999999982, -1.2600000000000007, -1.5],
         [0, -1.4, -1.5707963267948966]]

        path2 = [[3.3999999999999999, -1.3999999999999999, -0.0],
         [3.1499999999999999, -1.2599999999999998, -0.25],
         [3.1499999999999999, -1.2599999999999998, -0.5],
         [3.1499999999999999, -1.2599999999999998, -0.75],
         [3.1499999999999999, -1.2599999999999998, -1.0],
         [3.1499999999999999, -1.2599999999999998, -1.25],
         [3.1499999999999999, -1.2599999999999998, -1.5],
         [3.1499999999999999, -1.2599999999999998, -1.75],
         [3.1499999999999999, -1.2599999999999998, -2.0],
         [3.1499999999999999, -1.2599999999999998, -2.25],
         [3.1499999999999999, -1.2599999999999998, -2.5],
         [3.1499999999999999, -1.2599999999999998, -2.75],
         [3.1499999999999999, -1.2599999999999998, -3.0],
         [2.8999999999999999, -1.3999999999999999, 3.0331853071795862],
         [2.8999999999999999, -1.3999999999999999, 2.7831853071795862],
         [2.8999999999999999, -1.2599999999999998, 2.5331853071795862],
         [2.8999999999999999, -1.2599999999999998, 2.2831853071795862],
         [2.8999999999999999, -1.2599999999999998, 2.0331853071795862],
         [2.8999999999999999, -1.2599999999999998, 1.7831853071795862],
         [2.8999999999999999, -1.2599999999999998, 1.5331853071795862],
         [2.8999999999999999, -1.2599999999999998, 1.2831853071795862],
         [2.8999999999999999, -1.2599999999999998, 1.0331853071795862],
         [2.8999999999999999, -1.2599999999999998, 0.78318530717958623],
         [2.8999999999999999, -1.2599999999999998, 0.53318530717958623],
         [2.8999999999999999, -1.2599999999999998, 0.28318530717958623],
         [2.8999999999999999, -1.2599999999999998, 0.033185307179586232],
         [2.8999999999999999, -1.2599999999999998, -0.21681469282041377],
         [2.8999999999999999, -1.2599999999999998, -0.46681469282041377],
         [2.8999999999999999, -1.2599999999999998, -0.71681469282041377],
         [2.8999999999999999, -1.2599999999999998, -0.96681469282041377],
         [2.8999999999999999, -1.2599999999999998, -1.2168146928204138],
         [2.8999999999999999, -1.2599999999999998, -1.4668146928204138],
         [2.8999999999999999, -1.2599999999999998, -1.7168146928204138],
         [2.8999999999999999, -1.2599999999999998, -1.9668146928204138],
         [2.6499999999999999, -1.2599999999999998, -2.2168146928204138],
         [2.3999999999999999, -1.2599999999999998, -2.4668146928204138],
         [2.1499999999999999, -1.2599999999999998, -2.4668146928204138],
         [1.8999999999999999, -1.2599999999999998, -2.2168146928204138],
         [1.6499999999999999, -1.1199999999999997, -1.9668146928204138],
         [1.6499999999999999, -0.97999999999999965, -1.9668146928204138],
         [1.3999999999999999, -0.83999999999999964, -1.7168146928204138],
         [1.1499999999999999, -0.69999999999999962, -1.4668146928204138],
         [0.89999999999999991, -0.55999999999999961, -1.2168146928204138],
         [0.89999999999999991, -0.4199999999999996, -1.2168146928204138],
         [0.89999999999999991, -0.27999999999999958, -1.2168146928204138],
         [0.89999999999999991, -0.13999999999999957, -1.2168146928204138],
         [0.89999999999999991, 4.4408920985006262e-16, -1.2168146928204138],
         [0.89999999999999991, 0.14000000000000046, -1.2168146928204138],
         [0.89999999999999991, 0.28000000000000047, -1.2168146928204138],
         [0.89999999999999991, 0.42000000000000048, -1.2168146928204138],
         [0.89999999999999991, 0.5600000000000005, -1.2168146928204138],
         [0.89999999999999991, 0.70000000000000051, -0.96681469282041377],
         [0.89999999999999991, 0.84000000000000052, -0.71681469282041377],
         [0.64999999999999991, 0.98000000000000054, -0.46681469282041377],
         [0.39999999999999991, 1.1200000000000006, -0.21681469282041377],
         [0.14999999999999991, 1.1200000000000006, -0.21681469282041377],
         [-0.10000000000000009, 1.1200000000000006, -0.21681469282041377],
         [-0.35000000000000009, 1.1200000000000006, -0.21681469282041377],
         [-0.60000000000000009, 1.1200000000000006, -0.21681469282041377],
         [-0.85000000000000009, 1.1200000000000006, -0.21681469282041377],
         [-1.1000000000000001, 1.1200000000000006, -0.21681469282041377],
         [-1.3500000000000001, 1.1200000000000006, -0.21681469282041377],
         [-1.6000000000000001, 1.1200000000000006, -0.21681469282041377],
         [-1.8500000000000001, 1.1200000000000006, -0.21681469282041377],
         [-2.1000000000000001, 1.1200000000000006, -0.21681469282041377],
         [-2.3500000000000001, 1.2600000000000007, 0.033185307179586232],
         [-2.8, 1.4, 0.05]]


        # Now that you have computed a path, convert it to an openrave trajectory
        rob = robotList[0]
        rob1 = robotList[1]
        rob2 = robotList[2]

        traj = ConvertPathToTrajectory(rob, path)
        traj1 = ConvertPathToTrajectory(rob1, path1)
        traj2 = ConvertPathToTrajectory(rob2, path2)
        # Execute the trajectory on the robot.
        if traj != None:
            rob.GetController().SetPath(traj)
        if traj1 != None:
            rob1.GetController().SetPath(traj1)
        if traj2 != None:
            rob2.GetController().SetPath(traj2)
        time.sleep(5)

    waitrobot(robot)

    #### END OF YOUR CODE ###


    raw_input("Press enter to exit...")
    env.Destroy()
